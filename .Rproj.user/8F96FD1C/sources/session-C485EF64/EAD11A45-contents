library(MatchIt)
library(sampling)
library(tidyverse)
library(dplyr)
library(cobalt)
library(grid)

##########################################################################################################
####################### selectMatch() [sitepickR Package - Testing Version]  ######################
################### Elizabeth A. Stuart, Robert Olsen & Elena Badillo-Goicoechea, May 2022 ###############
##########################################################################################################

source("sitepickR_helpers.R")
source("sitepickR_buildDF.R")
source("sampleUnits.R")
source("getMatches.R")
source("sampleSubUnits.R")
source("balanceDiagnostics.R")


# I. MAIN FUNCTION: selectMatch()

#' @export
#' @param df dataframe; sub-unit level dataframe with both sub-unit and unit level variables
#' @param unit_ID character; name of unit ID column 
#' @param subUnit_ID character; name of sub-unit ID column
#' @param unit_vars vector; column names of unit level variables  to match units on
#' @param nUnitSamp numeric; number of units to be initially randomly selected
#' @param nRepUnits numeric; number of replacement units to find for each selected unit
#' @param nsubUnits numeric; number of sub-units to be randomly selected for each unit
#' @param subUnit_samp_vars vector;  column names of unit level variables  to sample units on
#' @param calipValue numeric; number of standard deviations to be used as caliper for matching units on calip_match_vars
#' @param seedN numeric; seed number to be used for sampling. If NA, calls set.seed(); default = NA
#' @param exact_match_vars vector; column names of categorical variables on which units must be matched exactly. Must be present in 'unit_vars'; default = NULL
#' @param calip_match_vars vector; column names of continuous variables on which units must be matched within a specified caliper. Must be present in 'unit_vars'; default = NULL
#' @param matchDistance character; matchit distance parameter to obtain optimal matches (nearest neigboors); default = "mahalanois"
#' @param sizeFlag logical; if TRUE, sampling is made proportional to unit size; default = TRUE
#' @param replaceFlag logical; if TRUE, get matches with replacement; default = TRUE
#' @param writeOut logical; if TRUE, writes a .csv file for each output table; default = TRUE
#' @param replacementUnitsFilename character; csv filename for saving {unit:replacement} directory when writeOut == TRUE; default = "replacementUnits.csv"
#' @param subUnitTableFilename character; csv filename for saving {unit:replacement} directory when writeOut == TRUE; default = "subUnitTable.csv"
#' @return  list with: 1) table of the form: {selected unit i: (unit i replacements)}, 2) table of the form: {potential unit i:(unit i sub-units), 3) balance diagnostics 
#' 
selectMatch <- function(df,  
                        unit_ID,
                        subUnit_ID,
                        subUnit_samp_vars,
                        unit_vars,
                        nUnitSamp,
                        nRepUnits,
                        nsubUnits,
                        exact_match_vars=NULL,
                        calip_match_vars=NULL,
                        calipValue = 0.2,
                        seedN = NA,
                        matchDistance = "mahalanobis",
                        sizeFlag = TRUE,
                        replaceFlag = TRUE, 
                        writeOut = TRUE,
                        replacementUnitsFilename = "replacementUnits.csv",
                        subUnitTableFilename = "subUnitTable.csv"
                        
)
{
  
  if(!is.na(seedN)) {
    set.seed(seedN)}

  df_ <- buildDF(df, unit_ID, subUnit_ID, unit_vars, subUnit_samp_vars)
  
  ### 1. INITIAL UNIT SELECTION: Select units (1 = Selected, 0 = Non selected) via nested cube sampling

  dfSU <- sampleUnits(df_, unit_vars, exact_match_vars, nUnitSamp,  sizeFlag)
  
  # calculate appropriate weights for unit balance diagnstics :
  if(sizeFlag == TRUE){dfSU$w <- 1 / dfSU$InclusionProb} else {dfSU$w <- 1}
  
  # Create a subunit lookup table of the form: {unit U:[all U sub_units]}:
  units <- distinct(select(dfSU, "unit_ID"))
  units$selectedUnit_idx <- rownames(units)
  
  subUnitLookup <- distinct(suppressMessages(plyr::join(units,
                            select(df_, c("unit_ID", "subUnit_ID")), type="inner")))
  subUnitLookup <- distinct(subUnitLookup)
  
  
  ### 2. FIND BEST MATCHES FOR ALL INITIALLY SELECTED UNITS
  
  rmatches <- getMatches(dfSU, sizeFlag, unit_vars, exact_match_vars,
                          calip_match_vars, calipValue, matchDistance, nRepUnits, replaceFlag, calipers)
  
  unitMatch <- rmatches[[1]]
  dfMatch <- rmatches[[2]]
  
  # Build selected unit/replacements {unit U:[U best unit matches list]} directory (user output #1):
    
  replacementUnits <- as.data.frame(unitMatch[[1]])
  replacementUnits <- distinct(replacementUnits)
  replacementUnits$selectedUnit_idx <- rownames(replacementUnits)
  colnames(replacementUnits)[1:nRepUnits] <- unlist(lapply(colnames(replacementUnits)[1:nRepUnits] ,
                                                           function (x) str_replace(x, "V", "Unit_replacement_")))
  replacementUnits <- select(replacementUnits, c(selectedUnit_idx, colnames(replacementUnits)[1:nRepUnits]))
  
  
  # Re-map original unit ID names for unit row indeces:
  for(col in colnames(replacementUnits)){
    replacementUnits[,col] = get_unit_ID(replacementUnits[,col], units)
  }
  replacement_unit_cols <- colnames(replacementUnits)[2:ncol(replacementUnits)]
  colnames(replacementUnits) <- c("Unit_ID", replacement_unit_cols)
  

  ### 3. SELECT SUB-UNITS FOR SELECTED / REPLACEMENT UNITS:
  
  subUnitTable <- sampleSubUnits(df_, subUnitLookup, replacementUnits, subUnit_samp_vars, nsubUnits)
  
  # Build  directory of the form: {potential unit U:[U sub-unit list]} (user output #2):
  
  subUnitTable <- subUnitTable %>% 
    unnest(sub_units) %>% 
    group_by_at(c("unit_ID")) %>% 
    mutate(key = row_number()) %>% 
    spread(key, sub_units)
  
  colnames(subUnitTable) <- c("Unit_ID", sapply(colnames(subUnitTable)[2:ncol(subUnitTable)], 
                                                function (x) paste("Sub_unit", x, "_ID", "")))
  subUnitTable <- subUnitTable[,c(1:(nsubUnits+1))]
  
  
  ### 4. BALANCE DIAGNOSTICS
  
  #1. Covariate SMD between Units and Population:
  
  unitBal <- unitSampBalance(dfSU, unit_vars, exact_match_vars)
  
  unitSampBalTab <- unitBal[[1]]
  unitSampBalance_ <- unitBal[[2]]
  
  #2.Covariate SMD between Replacement (1,...,nth) and Initially selected (0) unit groups:
  
  unitNumVars <- all_of(setdiff(unit_vars,
                                exact_match_vars))
  # Recover unit groups from MatchIt Output:
  
  matches <- get_matches(unitMatch,
                         distance = "distance",
                         weights = "weights",
                         subclass = "subclass",
                         id = "id",
                         data = dfMatch,
                         include.s.weights = TRUE)
  
  mUnits <- inner_join(dfMatch, select(matches, c("unit_ID", "subclass", "weights")), by ="unit_ID")
  
  mUnits$unitGrp <- NA
  for(i in 1:nrow(mUnits)){
    if(is.na(mUnits$unitGrp[i])){
      for(j in 0:nRepUnits){
        if(mUnits$unit_ID[i] %in% replacementUnits[,(j+1)]){
          mUnits$unitGrp[i] = j}
        
      }} else{next}
  }
  
  
  # Calculate difference between each unit replacement group (1,..., n) and initially selected units:
  matchBalance_ <- matchBalance(mUnits, unitNumVars, nRepUnits)
  
  
  ### 3. % Of successful matches per replacement group:
  
  matchCount_ <- matchCount(replacementUnits, nRepUnits)
  
  ### 4. Covariate SMD between Sub-units and Population:
  
  subunitNumVars <- c("unitSize", all_of(setdiff(c(unit_vars, subUnit_samp_vars),
                                                 exact_match_vars)))
  
  subUnitBalance_ <- subUnitBalance(df_, dfSU, mUnits, subUnitTable, subunitNumVars, nRepUnits)
  
  # 5. PREPARE OUTPUT
  
    # Write csv files:
    if(writeOut==TRUE){

      # unit:{replacements} directory (user output):
      write.csv(replacementUnits, replacementUnitsFilename)
      
      # unit:{subunits} directory (user output):
      write.csv(subUnitTable,  subUnitTableFilename)
      
      # **unit level data (internal diagnostics)**:
      write.csv(distinct_at(dfSU, c("unit_ID","Selected", "InclusionProb", "unitSize", "w")),
                paste("districtData_", "N=",n, "sizeFlag", as.character(sizeFlag),"_", "seed", seedN, ".csv", sep=""))
    }
      
  # Output objects (7) into list:
  mainRes = list(replacementUnits, subUnitTable, # {selected unit: unit replacements} & {unit:subunits} lookup tables
                 unitSampBalTab, unitSampBalance_, # balance table & love plot for selected units vs. population
                 matchBalance_, # SMD line charts for unit groups vs. initial units
                 matchCount_, # barchart with % of successful matches per unit group
                 subUnitBalance_ # SMD line charts for subunits from each unit groups vs. population
                 
                )

  return(mainRes)
}












