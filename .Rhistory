m1 <- MatchIt::matchit(as.formula(paste("Selected ~ ", paste(unit_vars, collapse= "+"))),
data = dfMatch,
distance = matchDistance,
ratio = nRepUnits,
replace = replaceFlag,
caliper = calipers,
std.caliper = rep(TRUE,length(calipers)))
#Second round of matching without a caliper:
m2 <- MatchIt::matchit(as.formula(paste("Selected ~ ", paste(unit_vars, collapse= "+"))),
data = dfMatch,
distance = matchDistance,
ratio = nRepUnits,
replace = replaceFlag)
#For each treated unit, fill in match matrix with matches from
#match without caliper to get 10 matches total; avoid repeating matches:
for (i in rownames(m1$match.matrix)) {
#Which of the 10 requested matches were not found
nas <- is.na(m1$match.matrix[i,])
if (any(nas)) {
m1$match.matrix[i, nas] <- setdiff(m2$match.matrix[i,],
m1$match.matrix[i, !nas])[1:sum(nas)]
}
}
# Re-compute the weights using the updates match.matrix
m1$weights <- MatchIt:::weights.matrix(m1$match.matrix, m1$treat)
unitMatch <- m1} else {
## Case 3: Callipers & repeating units after matching is not allowed:
if(!is.null(calipers) & replaceFlag==FALSE) {
#Do matching with replacement with the caliper:
m1 <- MatchIt::matchit(as.formula(paste("Selected ~ ", paste(unit_vars, collapse= "+"))),
data = dfMatch,
distance = matchDistance,
ratio = nRepUnits,
replace = replaceFlag,
caliper = calipers,
std.caliper = rep(TRUE,length(calipers)))
#Second round of matching without a caliper on unmatched units
m2 <- MatchIt::matchit(as.formula(paste("Selected ~ ", paste(unit_vars, collapse= "+"))),
data = dfMatch,
distance = matchDistance,
ratio = nRepUnits,
replace = replaceFlag)
#discard = m1$treat == 0 & m1$weights > 0) # Unnecessary restriction?
#For each treated unit, fill in match matrix with matches from
#match without caliper to get 10 matches total
for (i in rownames(m1$match.matrix)) {
#Which of the 10 requested matches were not found
nas <- is.na(m1$match.matrix[i,])
if (any(nas)) {
m1$match.matrix[i, nas] <- m2$match.matrix[i,1:sum(nas)]
}
}
#Re-compute weights and subclasses from new match.matrix
m1$weights <- MatchIt:::weights.matrix(m1$match.matrix, m1$treat)
m1$subclass <- MatchIt:::mm2subclass(m1$match.matrix, m1$treat)
unitMatch <- m1}
}
}
return(list(unitMatch, dfMatch))
}
library(tidyverse)
getUnitID <- function(idx_col, units){
res=c()
for(i1 in 1:length(idx_col)){
uiD = NA
for(i2 in 1:nrow(units)){
if(!is.na(idx_col[i1]) & !is.na(units$selectedUnit_idx[i2]))
{
if (idx_col[i1] == units$selectedUnit_idx[i2]){
uiD <- units$unit_ID[i2]
}
res[i1] <- uiD} else{res[i1] <- NA}
}
}
return(res)
}
sampleUnits <- function(df_, unit_vars, exact_match_vars, nUnitSamp,  sizeFlag){
# Select units (1 = Selected, 0 = Non selected) via nested cube sampling:
if(sizeFlag == TRUE) {SEL = 1} else {SEL = 2}
dfSampledU  <- as.data.frame(sampling::balancedcluster(df_[,setdiff(c("unitSize", unit_vars),
exact_match_vars)],
m=nUnitSamp,
cluster=df_$unit_ID,
selection=SEL,
comment=FALSE,
method=SEL))
dfSampledU$unit_ID <- df_$unit_ID
dfSampledU <- dfSampledU %>%
dplyr::mutate(Selected = V1,
InclusionProb = V2)  %>%
dplyr::select(unit_ID, Selected, InclusionProb)
dfSU <- suppressMessages(dplyr::right_join(dplyr::distinct(dfSampledU), df_, by="unit_ID"))
return(dfSU)
}
sampleSubUnits <- function(df_, subUnitLookup, replacementUnits, subUnit_samp_vars, nsubUnits){
subUnitTable <- dplyr::distinct(dplyr::select(reshape2::melt(replacementUnits,
measure.vars=colnames(replacementUnits)), c("value")))
subUnitTable <- dplyr::filter(subUnitTable, !is.na(value))
subUnitTable$sub_units = NA
colnames(subUnitTable) <- c("unit_ID", "sub_units")
subUnitTable <- dplyr::distinct(subUnitTable)
# Sample sub-units for each potential unit:
for(i in 1:nrow(subUnitTable)){
un_ <- subUnitTable$unit_ID[i]
df_IDs <- dplyr::filter(subUnitLookup, unit_ID==un_)
if(nrow(df_IDs) <= nsubUnits) {subUnitTable$sub_units[i] <- list(df_IDs$subUnit_ID)} else {
df_ID <- dplyr::filter(df_, unit_ID==un_)
PIK=rep(nsubUnits/nrow(df_ID), times=nrow(df_ID))
s=sampling::samplecube(as.matrix(df_ID[, subUnit_samp_vars]),
pik=PIK,
order=1,
comment=F)
subUnitTable$sub_units[i] <- list(df_IDs[(1:length(PIK))[s==1],]$subUnit_ID)
}
}
return(subUnitTable)
}
if(!is.na(seedN)) {
set.seed(seedN)}
dfSU <- sampleUnits(df, unit_vars, exact_match_vars, nUnitSamp,  sizeFlag)
View(dfSU)
View(dfSU)
exact_match_vars
setdiff(c("unitSize", unit_vars),
exact_match_vars)
View(df)
View(dfCCD)
library(sitepickR)
rwCCD <- sitepickR::rwCCD
head(rwCCD)
View(rwCCD)
# data-raw/dfCCD.R
# Data import and processing pipeline
# Read pre-processed data:
rwCCD <- read.csv("data-raw/rawdfCAL.csv")
# Add a toy unit level categorical, "district type":
dfG <- rwCCD %>% dplyr::group_by(LEAID) %>%
summarise(unitSize = n())
dummy_dtrct_types <- c("A", "B", "C", "D")
dfG$distr.type <- sample(dummy_dtrct_types,
size = length(unique(rwCCD$LEAID)),
prob = rep(1/length(dummy_dtrct_types), length(dummy_dtrct_types)), replace = TRUE)
rwCCD <- suppressMessages(dplyr::left_join(rwCCD, dfG))[,-1]
usethis::use_data(rwCCD, overwrite = TRUE)
library(sitepickR)
rwCCD <- sitepickR::rwCCD
head(rwCCD)
View(rwCCD)
dfCCD <- buildDF(rwCCD,
unit_ID="LEAID", subUnit_ID="NCESSCH")
head(dfCCD)
PATH = "SOME-USER-FOLDER/"
replDISTRICTS = paste0(PATH, "/replacementUnits.csv") # filepath for {initial district:[replacements]} directory
dictSCHOOLS = paste0(PATH, "/subUnitTable.csv") # filepath for {district: [schools]} directory
PATH = "SOME-USER-FOLDER/"
replDISTRICTS = paste0(PATH, "/replacementUnits.csv") # filepath for {initial district:[replacements]} directory
dictSCHOOLS = paste0(PATH, "/subUnitTable.csv") # filepath for {district: [schools]} directory
seed = 1122
unitSamp_varsCCD <- c("w.pct.frlunch", "w.pct.black", "w.pct.hisp", "w.pct.female")
subUnitSamp_varsCCD <- c("sch.pct.frlunch", "sch.pct.black", "sch.pct.hisp", "sch.pct.female")
calip_match_vars <-  c("w.pct.black", "w.pct.hisp", "w.pct.female")
exact_match_vars <-  c("distr.type")
subUnitSamp_varsCCD <- c("sch.pct.frlunch", "sch.pct.black", "sch.pct.hisp", "sch.pct.female")
m.out <- selectMatch(df=dfCCD, # dataset
unit_ID="LEAID", # column name of district ID
subUnit_ID="NCESSCH", # column name of school ID
unit_vars=unitSamp_varsCCD,
subUnit_samp_vars=subUnitSamp_varsCCD,
exact_match_vars= exact_match_vars,
calip_match_vars=calip_match_vars ,
nUnitSamp = 100, # original district sample size
nRepUnits = 10, # number of desired matches per selected district
nsubUnits = 5, # number of schools to sample from each candidate district
calipValue = 0.2, #
seedN = seed,
matchDistance = "mahalanobis",
sizeFlag = TRUE,
replaceFlag = FALSE, #match without replacement
writeOut = FALSE, # write out a csv file for: 1) matched units and 2) selected schools
replacementUnitsFilename = replDISTRICTS,
subUnitTableFilename = dictSCHOOLS
)
library(sitepickR)
library(sitepickR)
library(sitepickR)
library(sitepickR)
library(sitepickR)
roxygen2::roxygenise()
roxygen2::roxygenise()
library(sitepickR)
usethis::use_vignette("sitepickR-demo")
library(sitepickR)
usethis::use_package_doc()
devtools::document()
install.packages("pkgdown")
usethis::use_pkgdown()
library(sitepickR)
?sitepickR::selectMatch
?sitepickR::buildDF
?sitepickR::`sitepickR-package`
devtools::document()
warnings()
usethis::use_pkgdown()
pkgdown::build_site()
usethis::use_pkgdown()
pkgdown::build_site()
usethis::use_pkgdown()
pkgdown::build_site()
devtools::document()
usethis::use_pkgdown()
pkgdown::build_site()
usethis::use_travis()
usethis::use_pkgdown()
pkgdown::build_site()
usethis::use_travis()
use_github_actions()
usethis::use_pkgdown()
pkgdown::build_site()
usethis::use_pkgdown()
pkgdown::build_site()
usethis::use_travis()
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_site()
roxygen2::roxygenise()
usethis::use_vignette("sitepickR-demo")
usethis::use_pkgdown()
pkgdown::build_site()
usethis::use_pkgdown()
pkgdown::build_site()
roxygen2::roxygenise()
usethis::use_pkgdown()
pkgdown::build_site()
library(sitepickR)
usethis::use_vignette("sitepickR-demo")
library(sitepickR)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
pkgdown::build_site()
roxygen2::roxygenise()
roxygen2::roxygenise()
warnings()
roxygen2::roxygenise()
library(sitepickR)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::preview_page('articles/sitepickR-demo.html')
library(sitepickR)
library(sitepickR)
library(sitepickR)
roxygen2::roxygenise()
library(sitepickR)
library(sitepickR)
roxygen2::roxygenise()
pkgdown::build_site()
library(tidyverse)
library(anytime)
library(maps)
library(data.table)
options(scipen=999)
setwd("/Users/elenagoicoechea/Documents/MH-IP/")
setwd("/Users/elenagoicoechea/MH-IP/")
getwd()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(sitepickR)
library(tidyverse)
library(anytime)
library(survey)
library(srvyr)
library(R.utils)
library(data.table)
library(gtsummary)
### changes axis
### summary table w/o N's
### table with quarterly prevs
# manuscript
################################ Mental Health and IP Schooling in the U.S. during the COVID-19 Pandemic ################################
setwd("/Users/elenabadillogoicoechea/Documents/MH-IP")
df <- readRDS("dfq_aug22.RDS")
df <- sample_n(df, round(0.20*nrow(df), 1))
df = df %>%  select("weight", "anxious_bin", "depressed_bin", "state", "quarter",
"Gender", "Age","Employed", "Educational_Level",
"num_kids", "AvgCases", "AvgDeaths",
"Description", "Poverty", "White")  %>% drop_na()
quarters <- c("q3", "q4", "q5", "q6", "q7", "q8", "q9")
df$Gender <- factor(df$Gender, levels = c("Male", "Female", "Non-binary",
"Other/Prefer not to answer", "(Missing)"))
df$Educational_Level <- factor(df$Educational_Level,
levels = c("Graduate","Less than HS",
"HS", "Some college",
"College/Professional Degree", "(Missing)"))
pred_vars <- c("Gender", "Age","Employed", "Educational_Level")
df$Educational_Level
dat <- df %>% filter(quarter %in% quarters, !is.na(state)) %>%
select(c("weight", "quarter", pred_vars, "anxious_bin", "depressed_bin", "state",
"num_kids", "AvgCases", "AvgDeaths", "Description", "Poverty",
"White")) %>%
drop_na
sdata <- svydesign(id=~0, weights=~weight, strata=~state, data=dat)
rm(dat)
anx = svyglm(anxious_bin ~ state + quarter
Gender + quarter*Gender +
anx = svyglm(anxious_bin ~ state + quarter +
Gender + quarter*Gender +
Age +  Employed + Educational_Level +
num_kids + AvgCases + AvgDeaths + Description +
Poverty + White,
design = sdata, family = quasibinomial())
saveRDS(anx, paste0("anxGenInt_", q, ".rds"))
df$Gender
df$quarter
df$quarter<- as.factor(df$quarter)
df$quarter
dat <- df %>% filter(quarter %in% quarters, !is.na(state)) %>%
select(c("weight", "quarter", pred_vars, "anxious_bin", "depressed_bin", "state",
"num_kids", "AvgCases", "AvgDeaths", "Description", "Poverty",
"White")) %>%
drop_na
sdata <- svydesign(id=~0, weights=~weight, strata=~state, data=dat)
rm(dat)
anx = svyglm(anxious_bin ~ state + quarter +
Gender + quarter*Gender +
Age +  Employed + Educational_Level +
num_kids + AvgCases + AvgDeaths + Description +
Poverty + White,
design = sdata, family = quasibinomial())
saveRDS(anx, "anxGenInt.rds")
a = jtools::summ(anx,  digits=3, confint=T, exp=T)
a = as.data.frame(a$coeftable)
a$X <- rownames(a)
colnames(a) <- c("c", "p025", "p975", "t val.", "p", "X")
View(a)
ac = filter(a,
(str_detect(X, "quart") | str_detect(X, "Gen") | str_detect(X, "Age") | str_detect(X, "Ed") |
str_detect(X, "Emp")) & (!str_detect(X, "Miss")))
View(ac)
a = filter(a,
(str_detect(X, "quart") | str_detect(X, "Gen") | str_detect(X, "Age") | str_detect(X, "Ed") |
str_detect(X, "Emp")) & (!str_detect(X, "Miss")))
a$ORint <- paste0(round(a$c, 2), " ", "(", round(a$p025, 2), ", ",
round(a$p975, 2), ")")
ac <- select(a, c("X", "ORint"))
View(ac)
write.csv(ac, "aGenOR.csv")
anx = svyglm(anxious_bin ~ state + quarter +
Gender + quarter*Age +
Age +  Employed + Educational_Level +
num_kids + AvgCases + AvgDeaths + Description +
Poverty + White,
design = sdata, family = quasibinomial())
#saveRDS(anx, "anxGenInt.rds")
a = jtools::summ(anx,  digits=3, confint=T, exp=T)
a = as.data.frame(a$coeftable)
a$X <- rownames(a)
colnames(a) <- c("c", "p025", "p975", "t val.", "p", "X")
a = filter(a,
(str_detect(X, "quart") | str_detect(X, "Gen") | str_detect(X, "Age") | str_detect(X, "Ed") |
str_detect(X, "Emp")) & (!str_detect(X, "Miss")))
a$ORint <- paste0(round(a$c, 2), " ", "(", round(a$p025, 2), ", ",
round(a$p975, 2), ")")
a <- select(a, c("X", "ORint"))
write.csv(a, "aAgeOR.csv")
#Aeduc
anx = svyglm(anxious_bin ~ state + quarter +
Gender +
Age +  Employed + Educational_Level +
quarter* Educational_Level +
num_kids + AvgCases + AvgDeaths + Description +
Poverty + White,
design = sdata, family = quasibinomial())
#saveRDS(anx, "anxGenInt.rds")
a = jtools::summ(anx,  digits=3, confint=T, exp=T)
a = as.data.frame(a$coeftable)
a$X <- rownames(a)
colnames(a) <- c("c", "p025", "p975", "t val.", "p", "X")
a = filter(a,
(str_detect(X, "quart") | str_detect(X, "Gen") | str_detect(X, "Age") | str_detect(X, "Ed") |
str_detect(X, "Emp")) & (!str_detect(X, "Miss")))
a$ORint <- paste0(round(a$c, 2), " ", "(", round(a$p025, 2), ", ",
round(a$p975, 2), ")")
a <- select(a, c("X", "ORint"))
write.csv(a, "aEducOR.csv")
df$Employed
anx = svyglm(anxious_bin ~ state + quarter +
Gender +
Age +  Employed + Educational_Level +
quarter*Employed  +
num_kids + AvgCases + AvgDeaths + Description +
Poverty + White,
design = sdata, family = quasibinomial())
#saveRDS(anx, "anxGenInt.rds")
a = jtools::summ(anx,  digits=3, confint=T, exp=T)
a = as.data.frame(a$coeftable)
a$X <- rownames(a)
colnames(a) <- c("c", "p025", "p975", "t val.", "p", "X")
a = filter(a,
(str_detect(X, "quart") | str_detect(X, "Gen") | str_detect(X, "Age") | str_detect(X, "Ed") |
str_detect(X, "Emp")) & (!str_detect(X, "Miss")))
a$ORint <- paste0(round(a$c, 2), " ", "(", round(a$p025, 2), ", ",
round(a$p975, 2), ")")
a <- select(a, c("X", "ORint"))
write.csv(a, "aEmpOR.csv")
rm(df)
rm(anx)
# DG:
dep = svyglm(depressed_bin ~ state + quarter +
Gender + quarter*Gender +
Age +  Employed + Educational_Level +
num_kids + AvgCases + AvgDeaths + Description +
Poverty + White,
design = sdata, family = quasibinomial())
#saveRDS(dep, "depGenInt.rds")
d = jtools::summ(dep,  digits=3, confint=T, exp=T)
d = as.data.frame(d$coeftable)
d$X <- rownames(d)
colnames(d) <- c("c", "p025", "p975", "t val.", "p", "X")
d = filter(d,
(str_detect(X, "quart") | str_detect(X, "Gen") | str_detect(X, "Age") | str_detect(X, "Ed") |
str_detect(X, "Emp")) & (!str_detect(X, "Miss")))
d$ORint <- paste0(round(d$c, 2), " ", "(", round(d$p025, 2), ", ",
round(d$p975, 2), ")")
d <- select(d, c("X", "ORint"))
write.csv(d, "dGenOR.csv")
#Dage
dep = svyglm(depressed_bin ~ state + quarter +
Gender + quarter*Age +
Age +  Employed + Educational_Level +
num_kids + AvgCases + AvgDeaths + Description +
Poverty + White,
design = sdata, family = quasibinomial())
#saveRDS(dep, "depGenInt.rds")
d = jtools::summ(dep,  digits=3, confint=T, exp=T)
d = as.data.frame(d$coeftable)
d$X <- rownames(d)
colnames(d) <- c("c", "p025", "p975", "t val.", "p", "X")
d = filter(d,
(str_detect(X, "quart") | str_detect(X, "Gen") | str_detect(X, "Age") | str_detect(X, "Ed") |
str_detect(X, "Emp")) & (!str_detect(X, "Miss")))
d$ORint <- paste0(round(d$c, 2), " ", "(", round(d$p025, 2), ", ",
round(d$p975, 2), ")")
d <- select(d, c("X", "ORint"))
write.csv(d, "dAgeOR.csv")
#Deduc
dep = svyglm(depressed_bin ~ state + quarter +
Gender +
Age +  Employed + Educational_Level +
quarter* Educational_Level +
num_kids + AvgCases + AvgDeaths + Description +
Poverty + White,
design = sdata, family = quasibinomial())
#saveRDS(dep, "depGenInt.rds")
d = jtools::summ(dep,  digits=3, confint=T, exp=T)
d = as.data.frame(d$coeftable)
d$X <- rownames(d)
colnames(d) <- c("c", "p025", "p975", "t val.", "p", "X")
d = filter(d,
(str_detect(X, "quart") | str_detect(X, "Gen") | str_detect(X, "Age") | str_detect(X, "Ed") |
str_detect(X, "Emp")) & (!str_detect(X, "Miss")))
d$ORint <- paste0(round(d$c, 2), " ", "(", round(d$p025, 2), ", ",
round(d$p975, 2), ")")
d <- select(d, c("X", "ORint"))
write.csv(d, "dEducOR.csv")
#Demp
dep = svyglm(depressed_bin ~ state + quarter +
Gender +
Age +  Employed + Educational_Level +
quarter*Employed  +
num_kids + AvgCases + AvgDeaths + Description +
Poverty + White,
design = sdata, family = quasibinomial())
#saveRDS(dep, "depGenInt.rds")
d = jtools::summ(dep,  digits=3, confint=T, exp=T)
d = as.data.frame(d$coeftable)
d$X <- rownames(d)
colnames(d) <- c("c", "p025", "p975", "t val.", "p", "X")
d = filter(d,
(str_detect(X, "quart") | str_detect(X, "Gen") | str_detect(X, "Age") | str_detect(X, "Ed") |
str_detect(X, "Emp")) & (!str_detect(X, "Miss")))
d$ORint <- paste0(round(d$c, 2), " ", "(", round(d$p025, 2), ", ",
round(d$p975, 2), ")")
d <- select(d, c("X", "ORint"))
write.csv(d, "dEmpOR.csv")
rm(dep)
rm(sdata)
df <- readRDS("dfq_aug22.RDS")
dfpenn <- filter(df, state == "PA")
write.csv(dfpenn, "df_FBpenn.csv")
unique(dfpenn$zip)
len(unique(dfpenn$zip))
length(unique(dfpenn$zip))
length(unique(df$lat))
length(unique(df$zip))
length(unique(df$city))
dfrev19 <- read.csv("/Users/elenagoicoechea/Kallitechnets-main/ptch-19.csv", header=TRUE)
dfrev <- read.csv("/Users/elenagoicoechea/Kallitechnets-main/R-an/p4kreviews.csv", header=TRUE)
dfrev19 <- read.csv("/Users/elenagoicoechea/Kallitechnets-main/R-an/ptch-19.csv", header=TRUE)
dfmus <- read.csv("/Users/elenagoicoechea/Kallitechnets-main/R-an/ptchfk-data.csv", header=TRUE)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
