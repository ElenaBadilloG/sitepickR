matchDistance,
sizeFlag, # conduct initial district sampling proportional to its number of schools
replaceFlag, # match districts without replacement
writeOut, # write out a csv file for: 1) matched units and 2) selected schools
replacementUnitsFilename,
subUnitTableFilenam
)
View(dfCCD)
unitSamp_varsCCD
subUnitSamp_varsCCD
exact_match_vars
calip_match_vars
nUnitSamp
nRepUnits
nsubUnits
unitSamp_varsCCD
subUnitSamp_varsCCD
m.out <- selectMatch(df=dfCCD, # dataset
unit_ID="LEAID", # column name of district ID
subUnit_ID="NCESSCH", # column name of school ID
unit_vars=unitSamp_varsCCD,
subUnit_samp_vars=subUnitSamp_varsCCD,
exact_match_vars,
calip_match_vars,
nUnitSamp, # original district sample size
nRepUnits, # number of desired matches per selected district
nsubUnits, # number of schools to sample from each candidate district
calipValue, # maximum SMD for calip_match_vars
seedN, # seed number
matchDistance,
sizeFlag, # conduct initial district sampling proportional to its number of schools
replaceFlag, # match districts without replacement
writeOut, # write out a csv file for: 1) matched units and 2) selected schools
replacementUnitsFilename,
subUnitTableFilenam
)
unit_ID
unit_ID="LEAID"
subUnit_ID="NCESSCH"
dfCCD <- sitepickR::dfCCD
View(dfCCD)
seedN = 1234
unit_vars=unitSamp_varsCCD
unitSamp_varsCCD <- c("w.pct.frlunch", "w.pct.black", "w.pct.hisp", "w.pct.female")
subUnitSamp_varsCCD <- c("sch.pct.frlunch", "sch.pct.black", "sch.pct.hisp", "sch.pct.female")
exact_match_vars <-  c("distr.type")
calip_match_vars <-  c("w.pct.black", "w.pct.hisp", "w.pct.female")
seedN = 1234
unit_vars=unitSamp_varsCCD
subUnit_samp_vars=subUnitSamp_varsCCD
exact_match_vars=NULL
calip_match_vars=calip_match_vars # numeric covariates contrained to be within a maximum given distance
nUnitSamp = 100 # original district sample size
nRepUnits = 10 # number of desired matches per selected district
nsubUnits = 5 # number of schools to sample from each candidate district
calipValue = 0.2 # maximum distance (in terms of ansolute SMD) allowed for calip_match_vars
seedN = 1234
matchDistance = "mahalanobis"
sizeFlag = TRUE # conduct initial district sampling proportional to its number of schools
replaceFlag = FALSE # match districts without replacement
writeOut = FALSE # write out a csv file for: 1) matched units and 2) selected schools
replacementUnitsFilename = replDISTRICTS # filename for {unit:replacement} directory
dfCCD <- sitepickR::dfCCD
head(dfCCD)
PATH = "SOME-PREFERRED-FOLDER/"
replDISTRICTS = paste0(PATH, "/replacementUnits.csv") # {initial district:[replacements]} directory
dictSCHOOLS = paste0(PATH, "/subUnitTable.csv") # {district: [schools]} directory
seedN = 1234
unit_vars=unitSamp_varsCCD
subUnit_samp_vars=subUnitSamp_varsCCD
exact_match_vars=NULL
calip_match_vars=calip_match_vars # numeric covariates contrained to be within a maximum given distance
nUnitSamp = 100 # original district sample size
nRepUnits = 10 # number of desired matches per selected district
nsubUnits = 5 # number of schools to sample from each candidate district
calipValue = 0.2 # maximum distance (in terms of ansolute SMD) allowed for calip_match_vars
seedN = 1234
matchDistance = "mahalanobis"
sizeFlag = TRUE # conduct initial district sampling proportional to its number of schools
replaceFlag = FALSE # match districts without replacement
writeOut = FALSE # write out a csv file for: 1) matched units and 2) selected schools
replacementUnitsFilename = replDISTRICTS # filename for {unit:replacement} directory
subUnitTableFilename = dictSCHOOLS # filename for final {unit:school} directory
m.out <- selectMatch(df=dfCCD, # dataset
unit_ID="LEAID", # column name of district ID
subUnit_ID="NCESSCH", # column name of school ID
unit_vars=unitSamp_varsCCD,
subUnit_samp_vars=subUnitSamp_varsCCD,
exact_match_vars,
calip_match_vars,
nUnitSamp, # original district sample size
nRepUnits, # number of desired matches per selected district
nsubUnits, # number of schools to sample from each candidate district
calipValue, # maximum SMD for calip_match_vars
seedN, # seed number
matchDistance,
sizeFlag, # conduct initial district sampling proportional to its number of schools
replaceFlag, # match districts without replacement
writeOut, # write out a csv file for: 1) matched units and 2) selected schools
replacementUnitsFilename,
subUnitTableFilenam
)
m.out <- selectMatch(df=dfCCD, # dataset
unit_ID="LEAID", # column name of district ID
subUnit_ID="NCESSCH", # column name of school ID
unit_vars=unitSamp_varsCCD,
subUnit_samp_vars=subUnitSamp_varsCCD,
exact_match_vars,
calip_match_vars,
nUnitSamp, # original district sample size
nRepUnits, # number of desired matches per selected district
nsubUnits, # number of schools to sample from each candidate district
calipValue, # maximum SMD for calip_match_vars
seedN, # seed number
matchDistance,
sizeFlag, # conduct initial district sampling proportional to its number of schools
replaceFlag, # match districts without replacement
writeOut, # write out a csv file for: 1) matched units and 2) selected schools
replacementUnitsFilename,
subUnitTableFilenam
)
dfCCD <- sitepickR::dfCCD
View(dfCCD)
exact_match_vars
if(!require(devtools)){
install.packages("devtools")
}
if(!require(sitepickR)){
devtools::install_github("ElenaBadilloG/sitepickR")
}
library(sitepickR)
dfCCD <- sitepickR::dfCCD
head(dfCCD)
dfCCD <- read.csv("rawdfCAL.csv")
dfCCD[,-1]
d=dfCCD[,-1]
load("~/sitepickR/data/dfCCD.rda")
here:here()
here:here
getwd()
roxygen2::roxygenise()
library(sitepickR)
# data-raw/dfCCD.R
# Data import and processing pipeline
# Read pre-processed data:
rwCCD <- read.csv("rawdfCAL.csv")
library(sitepickR)
usethis::use_data(rwCCD, rwCCD, overwrite = TRUE)
library(sitepickR)
usethis::use_data(rwCCD, rwCCD, overwrite = TRUE)
library(sitepickR)
# Read pre-processed data:
rwCCD <- read.csv("rawdfCAL.csv")
rwCCD <- read.csv("data/rawdfCAL.csv")
rwCCD <- read.csv("data-raw/rawdfCAL.csv")
# # Add a toy unit level categorical, "district type":
# dfG <- dfCCD  %>% dplyr::group_by(LEAID) %>%
#   summarise(unitSize = n())
# dummy_dtrct_types <- c("A", "B", "C", "D")
# dfG$distr.type <- sample(dummy_dtrct_types,
#                          size = length(unique(dfCCD$LEAID)),
#                          prob = rep(1/length(dummy_dtrct_types), length(dummy_dtrct_types)), replace = TRUE)
#
# dfCCD <- suppressMessages(dplyr::left_join(dfCCD, dfG))[,-1]
usethis::use_data(rwCCD, overwrite = TRUE)
library(sitepickR)
library(sitepickR)
rwCCD <- sitepickR::rwCCD
head(rwCCD)
dfCDD <- buildDF(rWCCD)
dfCDD <- buildDF(rwCCD)
View(rwCCD)
library(sitepickR)
library(sitepickR)
rwCCD <- sitepickR::rwCCD
head(rwCCD)
dfCDD <- buildDF(rwCCD,
unit_ID="LEAID", subUnit_ID="NCESSCH")
dfCDD <- buildDF(rwCCD,
unit_ID="LEAID", subUnit_ID="NCESSCH")
library(sitepickR)
library(sitepickR)
rwCCD <- sitepickR::rwCCD
head(rwCCD)
dfCCD <- buildDF(rwCCD,
unit_ID="LEAID", subUnit_ID="NCESSCH")
head(dfCCD)
library(sitepickR)
library(sitepickR)
library(sitepickR)
exact_match_vars
exact_match_vars
library(sitepickR)
rwCCD <- sitepickR::rwCCD
head(rwCCD)
dfCCD <- buildDF(rwCCD,
unit_ID="LEAID", subUnit_ID="NCESSCH")
head(dfCCD)
PATH = "SOME-USER-FOLDER/"
replDISTRICTS = paste0(PATH, "/replacementUnits.csv") # filepath for {initial district:[replacements]} directory
dictSCHOOLS = paste0(PATH, "/subUnitTable.csv") # filepath for {district: [schools]} directory
seed = 1122
unitSamp_varsCCD <- c("w.pct.frlunch", "w.pct.black", "w.pct.hisp", "w.pct.female")
subUnitSamp_varsCCD <- c("sch.pct.frlunch", "sch.pct.black", "sch.pct.hisp", "sch.pct.female")
exact_match_vars <-  c("distr.type")
calip_match_vars <-  c("w.pct.black", "w.pct.hisp", "w.pct.female")
calipValue = 0.2
nsubUnits = 5
nRepUnits = 10
nUnitSamp = 100
calip_match_vars=calip_match_vars
exact_match_vars= exact_match_vars
subUnit_samp_vars=subUnitSamp_varsCCD
unit_vars=unitSamp_varsCCD
subUnit_ID="NCESSCH"
unit_ID="LEAID"
df=dfCCD
writeOut = FALSE
replaceFlag = FALSE
sizeFlag = TRUE
matchDistance = "mahalanobis"
seedN = seed
getMatches <- function(dfSU, sizeFlag, unit_vars, exact_match_vars,
calip_match_vars, calipValue, matchDistance, nRepUnits, replaceFlag, calipers){
# Prepare dataset for matching:
if(sizeFlag==TRUE){
unit_vars <- c("unitSize", tidyselect::all_of(unit_vars))
calip_match_vars <- c("unitSize", tidyselect::all_of(calip_match_vars))}
calipers = rep(calipValue, length(calip_match_vars))
names(calipers) <- calip_match_vars
if(!is.null(exact_match_vars)){
dfMatch <- dfSU %>%
dplyr::distinct() %>%
dplyr::select(c("unit_ID", "unitSize", "Selected",
tidyselect::all_of(unit_vars, exact_match_vars))) %>%
dplyr::group_by_at(c("unit_ID", "Selected", tidyselect::all_of(exact_match_vars))) %>%
dplyr::summarise_at(c("unitSize", tidyselect::all_of(setdiff(unit_vars))), mean)
} else{
dfMatch <- dfSU %>%
dplyr::distinct() %>%
dplyr::select(c("unit_ID", "unitSize", "Selected",
tidyselect::all_of(unit_vars))) %>%
dplyr::group_by_at(c("unit_ID", "Selected")) %>%
dplyr::summarise_at(c("unitSize", unit_vars), mean)
}
# Find matches for each unit (casewise and relaxing calliper when needed):
## Case 1: No callipers:
if(is.null(calipers)) {
unitMatch <- MatchIt::matchit(as.formula(paste("Selected ~ ", paste(unit_vars, collapse= "+"))),
data = dfMatch,
distance = matchDistance,
ratio = nRepUnits,
replace = replaceFlag)
} else {
## Case 2: Callipers  & repeating units after matching is allowed:
if(!is.null(calipers) & replaceFlag == TRUE){ # Match with calipers (case NULL/numeric vector):
#Do matching with replacement with the caliper:
m1 <- MatchIt::matchit(as.formula(paste("Selected ~ ", paste(unit_vars, collapse= "+"))),
data = dfMatch,
distance = matchDistance,
ratio = nRepUnits,
replace = replaceFlag,
caliper = calipers,
std.caliper = rep(TRUE,length(calipers)))
#Second round of matching without a caliper:
m2 <- MatchIt::matchit(as.formula(paste("Selected ~ ", paste(unit_vars, collapse= "+"))),
data = dfMatch,
distance = matchDistance,
ratio = nRepUnits,
replace = replaceFlag)
#For each treated unit, fill in match matrix with matches from
#match without caliper to get 10 matches total; avoid repeating matches:
for (i in rownames(m1$match.matrix)) {
#Which of the 10 requested matches were not found
nas <- is.na(m1$match.matrix[i,])
if (any(nas)) {
m1$match.matrix[i, nas] <- setdiff(m2$match.matrix[i,],
m1$match.matrix[i, !nas])[1:sum(nas)]
}
}
# Re-compute the weights using the updates match.matrix
m1$weights <- MatchIt:::weights.matrix(m1$match.matrix, m1$treat)
unitMatch <- m1} else {
## Case 3: Callipers & repeating units after matching is not allowed:
if(!is.null(calipers) & replaceFlag==FALSE) {
#Do matching with replacement with the caliper:
m1 <- MatchIt::matchit(as.formula(paste("Selected ~ ", paste(unit_vars, collapse= "+"))),
data = dfMatch,
distance = matchDistance,
ratio = nRepUnits,
replace = replaceFlag,
caliper = calipers,
std.caliper = rep(TRUE,length(calipers)))
#Second round of matching without a caliper on unmatched units
m2 <- MatchIt::matchit(as.formula(paste("Selected ~ ", paste(unit_vars, collapse= "+"))),
data = dfMatch,
distance = matchDistance,
ratio = nRepUnits,
replace = replaceFlag)
#discard = m1$treat == 0 & m1$weights > 0) # Unnecessary restriction?
#For each treated unit, fill in match matrix with matches from
#match without caliper to get 10 matches total
for (i in rownames(m1$match.matrix)) {
#Which of the 10 requested matches were not found
nas <- is.na(m1$match.matrix[i,])
if (any(nas)) {
m1$match.matrix[i, nas] <- m2$match.matrix[i,1:sum(nas)]
}
}
#Re-compute weights and subclasses from new match.matrix
m1$weights <- MatchIt:::weights.matrix(m1$match.matrix, m1$treat)
m1$subclass <- MatchIt:::mm2subclass(m1$match.matrix, m1$treat)
unitMatch <- m1}
}
}
return(list(unitMatch, dfMatch))
}
library(tidyverse)
getUnitID <- function(idx_col, units){
res=c()
for(i1 in 1:length(idx_col)){
uiD = NA
for(i2 in 1:nrow(units)){
if(!is.na(idx_col[i1]) & !is.na(units$selectedUnit_idx[i2]))
{
if (idx_col[i1] == units$selectedUnit_idx[i2]){
uiD <- units$unit_ID[i2]
}
res[i1] <- uiD} else{res[i1] <- NA}
}
}
return(res)
}
sampleUnits <- function(df_, unit_vars, exact_match_vars, nUnitSamp,  sizeFlag){
# Select units (1 = Selected, 0 = Non selected) via nested cube sampling:
if(sizeFlag == TRUE) {SEL = 1} else {SEL = 2}
dfSampledU  <- as.data.frame(sampling::balancedcluster(df_[,setdiff(c("unitSize", unit_vars),
exact_match_vars)],
m=nUnitSamp,
cluster=df_$unit_ID,
selection=SEL,
comment=FALSE,
method=SEL))
dfSampledU$unit_ID <- df_$unit_ID
dfSampledU <- dfSampledU %>%
dplyr::mutate(Selected = V1,
InclusionProb = V2)  %>%
dplyr::select(unit_ID, Selected, InclusionProb)
dfSU <- suppressMessages(dplyr::right_join(dplyr::distinct(dfSampledU), df_, by="unit_ID"))
return(dfSU)
}
sampleSubUnits <- function(df_, subUnitLookup, replacementUnits, subUnit_samp_vars, nsubUnits){
subUnitTable <- dplyr::distinct(dplyr::select(reshape2::melt(replacementUnits,
measure.vars=colnames(replacementUnits)), c("value")))
subUnitTable <- dplyr::filter(subUnitTable, !is.na(value))
subUnitTable$sub_units = NA
colnames(subUnitTable) <- c("unit_ID", "sub_units")
subUnitTable <- dplyr::distinct(subUnitTable)
# Sample sub-units for each potential unit:
for(i in 1:nrow(subUnitTable)){
un_ <- subUnitTable$unit_ID[i]
df_IDs <- dplyr::filter(subUnitLookup, unit_ID==un_)
if(nrow(df_IDs) <= nsubUnits) {subUnitTable$sub_units[i] <- list(df_IDs$subUnit_ID)} else {
df_ID <- dplyr::filter(df_, unit_ID==un_)
PIK=rep(nsubUnits/nrow(df_ID), times=nrow(df_ID))
s=sampling::samplecube(as.matrix(df_ID[, subUnit_samp_vars]),
pik=PIK,
order=1,
comment=F)
subUnitTable$sub_units[i] <- list(df_IDs[(1:length(PIK))[s==1],]$subUnit_ID)
}
}
return(subUnitTable)
}
if(!is.na(seedN)) {
set.seed(seedN)}
dfSU <- sampleUnits(df, unit_vars, exact_match_vars, nUnitSamp,  sizeFlag)
View(dfSU)
View(dfSU)
exact_match_vars
setdiff(c("unitSize", unit_vars),
exact_match_vars)
View(df)
View(dfCCD)
library(sitepickR)
rwCCD <- sitepickR::rwCCD
head(rwCCD)
View(rwCCD)
# data-raw/dfCCD.R
# Data import and processing pipeline
# Read pre-processed data:
rwCCD <- read.csv("data-raw/rawdfCAL.csv")
# Add a toy unit level categorical, "district type":
dfG <- rwCCD %>% dplyr::group_by(LEAID) %>%
summarise(unitSize = n())
dummy_dtrct_types <- c("A", "B", "C", "D")
dfG$distr.type <- sample(dummy_dtrct_types,
size = length(unique(rwCCD$LEAID)),
prob = rep(1/length(dummy_dtrct_types), length(dummy_dtrct_types)), replace = TRUE)
rwCCD <- suppressMessages(dplyr::left_join(rwCCD, dfG))[,-1]
usethis::use_data(rwCCD, overwrite = TRUE)
library(sitepickR)
rwCCD <- sitepickR::rwCCD
head(rwCCD)
View(rwCCD)
dfCCD <- buildDF(rwCCD,
unit_ID="LEAID", subUnit_ID="NCESSCH")
head(dfCCD)
PATH = "SOME-USER-FOLDER/"
replDISTRICTS = paste0(PATH, "/replacementUnits.csv") # filepath for {initial district:[replacements]} directory
dictSCHOOLS = paste0(PATH, "/subUnitTable.csv") # filepath for {district: [schools]} directory
PATH = "SOME-USER-FOLDER/"
replDISTRICTS = paste0(PATH, "/replacementUnits.csv") # filepath for {initial district:[replacements]} directory
dictSCHOOLS = paste0(PATH, "/subUnitTable.csv") # filepath for {district: [schools]} directory
seed = 1122
unitSamp_varsCCD <- c("w.pct.frlunch", "w.pct.black", "w.pct.hisp", "w.pct.female")
subUnitSamp_varsCCD <- c("sch.pct.frlunch", "sch.pct.black", "sch.pct.hisp", "sch.pct.female")
calip_match_vars <-  c("w.pct.black", "w.pct.hisp", "w.pct.female")
exact_match_vars <-  c("distr.type")
subUnitSamp_varsCCD <- c("sch.pct.frlunch", "sch.pct.black", "sch.pct.hisp", "sch.pct.female")
m.out <- selectMatch(df=dfCCD, # dataset
unit_ID="LEAID", # column name of district ID
subUnit_ID="NCESSCH", # column name of school ID
unit_vars=unitSamp_varsCCD,
subUnit_samp_vars=subUnitSamp_varsCCD,
exact_match_vars= exact_match_vars,
calip_match_vars=calip_match_vars ,
nUnitSamp = 100, # original district sample size
nRepUnits = 10, # number of desired matches per selected district
nsubUnits = 5, # number of schools to sample from each candidate district
calipValue = 0.2, #
seedN = seed,
matchDistance = "mahalanobis",
sizeFlag = TRUE,
replaceFlag = FALSE, #match without replacement
writeOut = FALSE, # write out a csv file for: 1) matched units and 2) selected schools
replacementUnitsFilename = replDISTRICTS,
subUnitTableFilename = dictSCHOOLS
)
library(sitepickR)
library(sitepickR)
library(sitepickR)
library(sitepickR)
library(sitepickR)
roxygen2::roxygenise()
roxygen2::roxygenise()
library(sitepickR)
usethis::use_vignette("sitepickR-demo")
library(sitepickR)
usethis::use_package_doc()
devtools::document()
install.packages("pkgdown")
usethis::use_pkgdown()
library(sitepickR)
?sitepickR::selectMatch
?sitepickR::buildDF
?sitepickR::`sitepickR-package`
devtools::document()
warnings()
usethis::use_pkgdown()
pkgdown::build_site()
usethis::use_pkgdown()
pkgdown::build_site()
usethis::use_pkgdown()
pkgdown::build_site()
devtools::document()
usethis::use_pkgdown()
pkgdown::build_site()
usethis::use_travis()
usethis::use_pkgdown()
pkgdown::build_site()
usethis::use_travis()
use_github_actions()
usethis::use_pkgdown()
pkgdown::build_site()
usethis::use_pkgdown()
pkgdown::build_site()
usethis::use_travis()
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_site()
roxygen2::roxygenise()
usethis::use_vignette("sitepickR-demo")
usethis::use_pkgdown()
pkgdown::build_site()
usethis::use_pkgdown()
pkgdown::build_site()
roxygen2::roxygenise()
usethis::use_pkgdown()
pkgdown::build_site()
library(sitepickR)
usethis::use_vignette("sitepickR-demo")
library(sitepickR)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
pkgdown::build_site()
roxygen2::roxygenise()
roxygen2::roxygenise()
warnings()
roxygen2::roxygenise()
library(sitepickR)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::preview_page('articles/sitepickR-demo.html')
library(sitepickR)
library(sitepickR)
library(sitepickR)
roxygen2::roxygenise()
library(sitepickR)
library(sitepickR)
roxygen2::roxygenise()
